import random

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.filters import StateFilter
from aiogram.enums.parse_mode import ParseMode
from aiogram.utils.markdown import hlink
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state

from yoomoney import Quickpay, Client

from ikb.ikb import sub_ikb_ru, sub_ikb_eng, sub_ikb_esp, sub_ikb_cn, ikb_premium_ru, ikb_premium_eng, ikb_premium_es, ikb_premium_cn, ikb_back_ru, ikb_back_eng, ikb_back_es, ikb_back_cn, tokens_ikb_ru, tokens_ikb_eng, tokens_ikb_es, tokens_ikb_cn, get_paginated_kb_ru, get_paginated_kb_eng, get_paginated_kb_es, get_paginated_kb_cn, buy_tokens_ru, buy_tokens_eng, buy_tokens_es, buy_tokens_cn, Pagination_ru, Pagination_eng, Pagination_es, Pagination_cn
from db.db import user_in_db, check_user, lingo, user_lingo, update_ai, tokens_plus_update, set_mode
from db.db_pag import title, stat, stat_eng, stat_es, stat_cn
from db.db_premium import check_user_prem, user_in_prem
from lexicon.lexicon_ru import LEXICON_RU
from lexicon.lexicon_eng import LEXICON_ENG
from lexicon.lexicon_es import LEXICON_ES
from lexicon.lexicon_cn import LEXICON_CN
from .payment import TOKEN_API_U
from keyboard.kb import menu_kb_ru, menu_kb_eng, menu_kb_es, menu_kb_cn

router = Router()

user_do_buy: dict[int, dict[str]] = {}
premium_timer: dict[int, dict[int], dict[int]] = {}
user_page: dict[int] = {}
tokens: dict[int] = {}

Umoney = TOKEN_API_U
client = Client(TOKEN_API_U)

class FSMForm(StatesGroup):
    pre_menu=State() #–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º
    menu_pay=State() #–ú–µ–Ω—é —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –æ–ø–ª–∞—Ç—ã
    tokens=State() #–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å —Ç–æ–∫–µ–Ω–∞–º–∏


#–í—ã–±–æ—Ä —è–∑—ã–∫–∞ + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data == "ru_kb")
async def ru_lingo(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username
    user_name = callback.from_user.full_name
    user_ling = "RU"
    user_balance_tokens = 10000
    user_asks = 0
    neuronetwork = None
    premium_days = 0
    check = check_user(user_id)
    if check == False:
        user_in_db(user_id=user_id, username=username, user_name=user_name, user_ling=user_ling, user_balance_tokens=user_balance_tokens, user_asks=user_asks, neuronetwork=neuronetwork, premium_days=premium_days)
        await callback.message.edit_text(
        f"–ü—Ä–∏–≤–µ—Ç <b>{callback.from_user.full_name}</b>, —è ‚Äì <b>–ù–∏–∫</b> ‚Äì –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–≤–æ–∏—Ö –∏–¥–µ–π!\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –º–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π!",
        parse_mode = ParseMode.HTML,
        reply_markup=sub_ikb_ru()
    )
    else:
        user_lingo(user_id, user_ling)
        await callback.message.answer(
        LEXICON_RU["ling"],
        reply_markup=menu_kb_ru()
    )

@router.callback_query(F.data == "eng_kb")
async def ru_lingo(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username
    user_name = callback.from_user.full_name
    user_ling = "ENG"
    user_balance_tokens = 10000
    user_asks = 0
    neuronetwork = None
    premium_days = 0
    check = check_user(user_id)
    if check == False:
        user_in_db(user_id=user_id, username=username, user_name=user_name, user_ling=user_ling, user_balance_tokens=user_balance_tokens, user_asks=user_asks, neuronetwork=neuronetwork, premium_days=premium_days)
        await callback.message.edit_text(
        f"Hello <b>{callback.from_user.full_name}</b>, my name ‚Äì <b>Nick</b> ‚Äì I'm generator of your ideas\n\nFor continue work, sunscribe on my channel, you will find a lot of new knoweldges there!",
        parse_mode = ParseMode.HTML,
        reply_markup=sub_ikb_eng()
    )
    else:
        user_lingo(user_id, user_ling)
        await callback.message.answer(
        LEXICON_ENG["ling"],
        reply_markup=menu_kb_eng())

@router.callback_query(F.data == "esp_kb")
async def ru_lingo(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username
    user_name = callback.from_user.full_name
    user_ling = "ES"
    user_balance_tokens = 10000
    user_asks = 0
    neuronetwork = None
    premium_days = 0
    check = check_user(user_id)
    if check == False:
        user_in_db(user_id=user_id, username=username, user_name=user_name, user_ling=user_ling, user_balance_tokens=user_balance_tokens, user_asks=user_asks, neuronetwork=neuronetwork, premium_days=premium_days)
        await callback.message.edit_text(
        f"Hola <b>{callback.from_user.full_name}</b>, soy <b>Nick</b> ‚Äì ¬°el generador de tus ideas!\n\n¬°Para continuar, suscr√≠bete a mi canal que te traer√° un mont√≥n de nuevos conocimientos!",
        parse_mode = ParseMode.HTML,
        reply_markup=sub_ikb_esp()
    )
    else:
        user_lingo(user_id, user_ling)
        await callback.message.answer(
        LEXICON_ES["ling"],
        reply_markup=menu_kb_es())

@router.callback_query(F.data == "cn_kb")
async def ru_lingo(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username
    user_name = callback.from_user.full_name
    user_ling = "CN"
    user_balance_tokens = 10000
    user_asks = 0
    neuronetwork = None
    premium_days = 0
    check = check_user(user_id)
    if check == False:
        user_in_db(user_id=user_id, username=username, user_name=user_name, user_ling=user_ling, user_balance_tokens=user_balance_tokens, user_asks=user_asks, neuronetwork=neuronetwork, premium_days=premium_days)
        await callback.message.edit_text(
        f"ÊÇ®Â•Ω <b>{callback.from_user.full_name}</b>, ÊàëÊòØ<b>Â∞ºÂÖã</b> ‚Äì ÊÇ®ÁöÑÂàõÊÑèÁîüÊàêÂô®!\n\nË¶ÅÁªßÁª≠ËßÇÁúãÔºåËØ∑ËÆ¢ÈòÖÊàëÁöÑÈ¢ëÈÅìÔºåÂÆÉÂ∞Ü‰∏∫ÊÇ®Â∏¶Êù•ËÆ∏Â§öÊñ∞Áü•ËØÜÔºÅ",
        parse_mode = ParseMode.HTML,
        reply_markup=sub_ikb_cn()
    )
    else:
        user_lingo(user_id, user_ling)
        await callback.message.answer(
        LEXICON_CN["ling"],
        reply_markup=menu_kb_cn())

#–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º
@router.callback_query(F.data == "buy")
async def buy_premium(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    num1 = random.randint(1, 2147483647)
    num2 = random.randint(-2147483647, -1)
    num3 = (num1 + num2) * 3
    await state.update_data(labl = num3)
    user_do_buy[callback.from_user.id] = await state.get_data()
    invoice = Quickpay(
            receiver="410012465765599",
            quickpay_form="shop",
            targets="Sponsor",
            paymentType="SB",
            sum=499,
            label=num3
        )
    if lingo(uid) == "RU":
        await callback.message.edit_text(
                text = hlink(
                    title="–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ üëà",
                    url=invoice.base_url
                 ),
                parse_mode=ParseMode.HTML,
                reply_markup=ikb_premium_ru()
            )
    elif lingo(uid) == "ENG":
        await callback.message.edit_text(
            text = hlink(
                title="Your payment link has been generated üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=ikb_premium_eng()
        )
    elif lingo(uid) == "ES":
        await callback.message.edit_text(
            text = hlink(
                title="Se ha generado tu enlace de pago üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=ikb_premium_es()
        )
    elif lingo(uid) == "CN":
        await callback.message.edit_text(
            text = hlink(
                title="ÊÇ®ÁöÑ‰ªòÊ¨æÈìæÊé•Â∑≤ÁîüÊàê üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=ikb_premium_cn()
        )
    await state.set_state(FSMForm.pre_menu)

@router.callback_query(F.data == "check", StateFilter(FSMForm.pre_menu))
async def check(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    premium_days = 30
    try:
        history = client.operation_history(label = user_do_buy[callback.from_user.id]["labl"])
        for operation in history.operations:
            stata = operation.status
        try:
            if stata == "success":
                check_user_prem(uid)
                if check_user_prem(uid) == False:
                    user_in_prem(user_id = uid, days = premium_days)
                    if lingo(uid) == "RU":
                        await callback.message.edit_text(
                            LEXICON_RU["pay_yes"]
                        )
                    elif lingo(uid) == "ENG":
                        await callback.message.edit_text(
                            LEXICON_ENG["pay_yes"]
                        )
                    elif lingo(uid) == "ES":
                        await callback.message.edit_text(
                            LEXICON_ES["pay_yes"]
                        )
                    elif lingo(uid) == "CN":
                        await callback.message.edit_text(
                            LEXICON_CN["pay_yes"]
                        )
            else:
                    if lingo(uid) == "RU":
                        await callback.message.edit_text(
                            LEXICON_RU["pay_yes"]
                        )
                    elif lingo(uid) == "ENG":
                        await callback.message.edit_text(
                            LEXICON_ENG["pay_yes"]
                        )
                    elif lingo(uid) == "ES":
                        await callback.message.edit_text(
                            LEXICON_ES["pay_yes"]
                        )
                    elif lingo(uid) == "CN":
                        await callback.message.edit_text(
                            LEXICON_CN["pay_yes"]
                        )
        except UnboundLocalError:
            if lingo(uid) == "RU":
                await callback.message.edit_text(
                    LEXICON_RU["pay_no"],
                    reply_markup=ikb_back_ru()
                )
            elif lingo(uid) == "ENG":
                await callback.message.edit_text(
                    LEXICON_ENG["pay_no"],
                    reply_markup=ikb_back_eng()
                )
            elif lingo(uid) == "ES":
                await callback.message.edit_text(
                    LEXICON_ES["pay_no"],
                    reply_markup=ikb_back_es()
                )
            elif lingo(uid) == "CN":
                await callback.message.edit_text(
                    LEXICON_CN["pay_no"],
                    reply_markup=ikb_back_cn()
                )
    except KeyError:
        if lingo(uid) == "RU":
            await callback.message.edit_text(
                LEXICON_RU["pay_no"],
                reply_markup=ikb_back_ru()
            )
        elif lingo(uid) == "ENG":
            await callback.message.edit_text(
                LEXICON_ENG["pay_no"],
                reply_markup=ikb_back_eng()
            )
        elif lingo(uid) == "ES":
            await callback.message.edit_text(
                LEXICON_ES["pay_no"],
                reply_markup=ikb_back_es()
            )
        elif lingo(uid) == "CN":
            await callback.message.edit_text(
                LEXICON_CN["pay_no"],
                reply_markup=ikb_back_cn()
            )
    await state.set_state(FSMForm.pre_menu)

@router.callback_query(F.data == "check", StateFilter(FSMForm.tokens))
async def check(callback: CallbackQuery, state: FSMContext): 
    uid = callback.from_user.id
    token = tokens[callback.from_user.id]["buy_token"]
    try:
        history = client.operation_history(label = user_do_buy[callback.from_user.id]["labl"])
        for operation in history.operations:
            stata = operation.status
        try:
            if stata == "success":
                tokens_plus_update(uid, token)
                if lingo(uid) == "RU":
                    await callback.message.edit_text(
                        LEXICON_RU["pay_tokens_yes"]
                    )
                elif lingo(uid) == "ENG":
                    await callback.message.edit_text(
                        LEXICON_ENG["pay_tokens_yes"]
                    )
                elif lingo(uid) == "ES":
                    await callback.message.edit_text(
                        LEXICON_ES["pay_tokens_yes"]
                    )
                elif lingo(uid) == "CN":
                    await callback.message.edit_text(
                        LEXICON_CN["pay_tokens_yes"]
                    )
        except UnboundLocalError:
            if lingo(uid) == "RU":
                await callback.message.edit_text(
                    LEXICON_RU["pay_no"],
                    reply_markup=ikb_back_ru()
                )
            elif lingo(uid) == "ENG":
                await callback.message.edit_text(
                    LEXICON_ENG["pay_no"],
                    reply_markup=ikb_back_eng()
                )
            elif lingo(uid) == "ES":
                await callback.message.edit_text(
                    LEXICON_ES["pay_no"],
                    reply_markup=ikb_back_es()
                )
            elif lingo(uid) == "CN":
                await callback.message.edit_text(
                    LEXICON_CN["pay_no"],
                    reply_markup=ikb_back_cn()
                )
    except KeyError:
        if lingo(uid) == "RU":
            await callback.message.edit_text(
                LEXICON_RU["pay_no"],
                reply_markup=ikb_back_ru()
            )
        elif lingo(uid) == "ENG":
            await callback.message.edit_text(
                LEXICON_ENG["pay_no"],
                reply_markup=ikb_back_eng()
            )
        elif lingo(uid) == "ES":
            await callback.message.edit_text(
                LEXICON_ES["pay_no"],
                reply_markup=ikb_back_es()
            )
        elif lingo(uid) == "CN":
            await callback.message.edit_text(
                LEXICON_CN["pay_no"],
                reply_markup=ikb_back_cn()
            )
    await state.set_state(FSMForm.tokens)

@router.callback_query(F.data == "check")
async def check(callback: CallbackQuery, state: FSMContext): 
    uid = callback.from_user.id
    try:
        history = client.operation_history(label = user_do_buy[callback.from_user.id]["labl"])
        for operation in history.operations:
            stata = operation.status
        try:
            if stata == "success":
                if lingo(uid) == "RU":
                    await callback.message.edit_text(
                        LEXICON_RU["pay_yes"]
                    )
                elif lingo(uid) == "ENG":
                    await callback.message.edit_text(
                        LEXICON_ENG["pay_yes"]
                    )
                elif lingo(uid) == "ES":
                    await callback.message.edit_text(
                        LEXICON_ES["pay_yes"]
                    )
                elif lingo(uid) == "CN":
                    await callback.message.edit_text(
                        LEXICON_CN["pay_yes"]
                    )
        except UnboundLocalError:
            if lingo(uid) == "RU":
                await callback.message.edit_text(
                    LEXICON_RU["pay_no"],
                    reply_markup=ikb_back_ru()
                )
            elif lingo(uid) == "ENG":
                await callback.message.edit_text(
                    LEXICON_ENG["pay_no"],
                    reply_markup=ikb_back_eng()
                )
            elif lingo(uid) == "ES":
                await callback.message.edit_text(
                    LEXICON_ES["pay_no"],
                    reply_markup=ikb_back_es()
                )
            elif lingo(uid) == "CN":
                await callback.message.edit_text(
                    LEXICON_CN["pay_no"],
                    reply_markup=ikb_back_cn()
                )
    except KeyError:
        if lingo(uid) == "RU":
            await callback.message.edit_text(
                LEXICON_RU["pay_no"],
                reply_markup=ikb_back_ru()
            )
        elif lingo(uid) == "ENG":
            await callback.message.edit_text(
                LEXICON_ENG["pay_no"],
                reply_markup=ikb_back_eng()
            )
        elif lingo(uid) == "ES":
            await callback.message.edit_text(
                LEXICON_ES["pay_no"],
                reply_markup=ikb_back_es()
            )
        elif lingo(uid) == "CN":
            await callback.message.edit_text(
                LEXICON_CN["pay_no"],
                reply_markup=ikb_back_cn()
            )

#–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤

@router.callback_query(F.data == "10k")
async def tokens_10(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    token = 10000
    await state.update_data(buy_token = token)
    tokens[callback.from_user.id] = await state.get_data()
    num1 = random.randint(1, 2147483647)
    num2 = random.randint(-2147483647, -1)
    num3 = (num1 + num2) * 3
    await state.update_data(labl = num3)
    user_do_buy[callback.from_user.id] = await state.get_data()
    if check_user_prem(uid) == True:
        invoice = Quickpay(
                receiver="410012465765599",
                quickpay_form="shop",
                targets="Sponsor",
                paymentType="SB",
                sum=49,
                label=num3
            )
    else:
        invoice = Quickpay(
                receiver="410012465765599",
                quickpay_form="shop",
                targets="Sponsor",
                paymentType="SB",
                sum=99,
                label=num3
            )
    if lingo(uid) == "RU":
        await callback.message.edit_text(
                text = hlink(
                    title="–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ üëà",
                    url=invoice.base_url
                 ),
                parse_mode=ParseMode.HTML,
                reply_markup=buy_tokens_ru()
            )
    elif lingo(uid) == "ENG":
        await callback.message.edit_text(
            text = hlink(
                title="Your payment link has been generated üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=buy_tokens_eng()
        )
    elif lingo(uid) == "ES":
        await callback.message.edit_text(
            text = hlink(
                title="Se ha generado tu enlace de pago üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=buy_tokens_es()
        )
    elif lingo(uid) == "CN":
        await callback.message.edit_text(
            text = hlink(
                title="ÊÇ®ÁöÑ‰ªòÊ¨æÈìæÊé•Â∑≤ÁîüÊàê üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=buy_tokens_cn()
        )
    await state.set_state(FSMForm.tokens)

@router.callback_query(F.data == "20k")
async def tokens_10(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    token = 20000
    await state.update_data(buy_token = token)
    tokens[callback.from_user.id] = await state.get_data()
    num1 = random.randint(1, 2147483647)
    num2 = random.randint(-2147483647, -1)
    num3 = (num1 + num2) * 3
    await state.update_data(labl = num3)
    user_do_buy[callback.from_user.id] = await state.get_data()
    if check_user_prem(uid) == False:
        invoice = Quickpay(
                receiver="410012465765599",
                quickpay_form="shop",
                targets="Sponsor",
                paymentType="SB",
                sum=199,
                label=num3
            )
        if lingo(uid) == "RU":
            await callback.message.edit_text(
                    text = hlink(
                        title="–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ üëà",
                        url=invoice.base_url
                     ),
                    parse_mode=ParseMode.HTML,
                    reply_markup=buy_tokens_ru()
                )
        elif lingo(uid) == "ENG":
            await callback.message.edit_text(
                text = hlink(
                    title="Your payment link has been generated üëà",
                    url=invoice.base_url
                 ),
                parse_mode=ParseMode.HTML,
                reply_markup=buy_tokens_eng()
            )
        elif lingo(uid) == "ES":
            await callback.message.edit_text(
                text = hlink(
                    title="Se ha generado tu enlace de pago üëà",
                    url=invoice.base_url
                 ),
                parse_mode=ParseMode.HTML,
                reply_markup=buy_tokens_es()
            )
        elif lingo(uid) == "CN":
            await callback.message.edit_text(
                text = hlink(
                    title="ÊÇ®ÁöÑ‰ªòÊ¨æÈìæÊé•Â∑≤ÁîüÊàê üëà",
                    url=invoice.base_url
                 ),
                parse_mode=ParseMode.HTML,
                reply_markup=buy_tokens_cn()
            )
    else:
        invoice = Quickpay(
            receiver="410012465765599",
            quickpay_form="shop",
            targets="Sponsor",
            paymentType="SB",
            sum=99,
            label=num3
                )
        if lingo(uid) == "RU":
            await callback.message.edit_text(
                    text = hlink(
                        title="–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ üëà",
                        url=invoice.base_url
                     ),
                    parse_mode=ParseMode.HTML,
                    reply_markup=buy_tokens_ru()
                )
        elif lingo(uid) == "ENG":
            await callback.message.edit_text(
                text = hlink(
                    title="Your payment link has been generated üëà",
                    url=invoice.base_url
                 ),
                parse_mode=ParseMode.HTML,
                reply_markup=buy_tokens_eng()
            )
        elif lingo(uid) == "ES":
            await callback.message.edit_text(
                text = hlink(
                    title="Se ha generado tu enlace de pago üëà",
                    url=invoice.base_url
                 ),
                parse_mode=ParseMode.HTML,
                reply_markup=buy_tokens_es()
            )
        elif lingo(uid) == "CN":
            await callback.message.edit_text(
                text = hlink(
                    title="ÊÇ®ÁöÑ‰ªòÊ¨æÈìæÊé•Â∑≤ÁîüÊàê üëà",
                    url=invoice.base_url
                 ),
                parse_mode=ParseMode.HTML,
                reply_markup=buy_tokens_cn()
            )
    await state.set_state(FSMForm.tokens)

@router.callback_query(F.data == "30k")
async def tokens_10(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    token = 30000
    await state.update_data(buy_token = token)
    tokens[callback.from_user.id] = await state.get_data()
    num1 = random.randint(1, 2147483647)
    num2 = random.randint(-2147483647, -1)
    num3 = (num1 + num2) * 3
    await state.update_data(labl = num3)
    user_do_buy[callback.from_user.id] = await state.get_data()
    if check_user_prem(uid) == True:
        invoice = Quickpay(
                receiver="410012465765599",
                quickpay_form="shop",
                targets="Sponsor",
                paymentType="SB",
                sum=159,
                label=num3
            )
    else:
        invoice = Quickpay(
                receiver="410012465765599",
                quickpay_form="shop",
                targets="Sponsor",
                paymentType="SB",
                sum=299,
                label=num3
            )
    if lingo(uid) == "RU":
        await callback.message.edit_text(
                text = hlink(
                    title="–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ üëà",
                    url=invoice.base_url
                 ),
                parse_mode=ParseMode.HTML,
                reply_markup=buy_tokens_ru()
            )
    elif lingo(uid) == "ENG":
        await callback.message.edit_text(
            text = hlink(
                title="Your payment link has been generated üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=buy_tokens_eng()
        )
    elif lingo(uid) == "ES":
        await callback.message.edit_text(
            text = hlink(
                title="Se ha generado tu enlace de pago üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=buy_tokens_es()
        )
    elif lingo(uid) == "CN":
        await callback.message.edit_text(
            text = hlink(
                title="ÊÇ®ÁöÑ‰ªòÊ¨æÈìæÊé•Â∑≤ÁîüÊàê üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=buy_tokens_cn()
        )
    await state.set_state(FSMForm.tokens)

@router.callback_query(F.data == "150k")
async def tokens_10(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    token = 150000
    await state.update_data(buy_token = token)
    tokens[callback.from_user.id] = await state.get_data()
    num1 = random.randint(1, 2147483647)
    num2 = random.randint(-2147483647, -1)
    num3 = (num1 + num2) * 3
    await state.update_data(labl = num3)
    user_do_buy[callback.from_user.id] = await state.get_data()
    if check_user_prem(uid) == True:
        invoice = Quickpay(
                receiver="410012465765599",
                quickpay_form="shop",
                targets="Sponsor",
                paymentType="SB",
                sum=459,
                label=num3
            )
    else:
        invoice = Quickpay(
                receiver="410012465765599",
                quickpay_form="shop",
                targets="Sponsor",
                paymentType="SB",
                sum=999,
                label=num3
            )
    if lingo(uid) == "RU":
        await callback.message.edit_text(
                text = hlink(
                    title="–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ üëà",
                    url=invoice.base_url
                 ),
                parse_mode=ParseMode.HTML,
                reply_markup=buy_tokens_ru()
            )
    elif lingo(uid) == "ENG":
        await callback.message.edit_text(
            text = hlink(
                title="Your payment link has been generated üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=buy_tokens_eng()
        )
    elif lingo(uid) == "ES":
        await callback.message.edit_text(
            text = hlink(
                title="Se ha generado tu enlace de pago üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=buy_tokens_es()
        )
    elif lingo(uid) == "CN":
        await callback.message.edit_text(
            text = hlink(
                title="ÊÇ®ÁöÑ‰ªòÊ¨æÈìæÊé•Â∑≤ÁîüÊàê üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=buy_tokens_cn()
        )
    await state.set_state(FSMForm.tokens)

@router.callback_query(F.data == "500k")
async def tokens_10(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    token = 500000
    await state.update_data(buy_token = token)
    tokens[callback.from_user.id] = await state.get_data()
    num1 = random.randint(1, 2147483647)
    num2 = random.randint(-2147483647, -1)
    num3 = (num1 + num2) * 3
    await state.update_data(labl = num3)
    user_do_buy[callback.from_user.id] = await state.get_data()
    if check_user_prem(uid) == True:
        invoice = Quickpay(
                receiver="410012465765599",
                quickpay_form="shop",
                targets="Sponsor",
                paymentType="SB",
                sum=1399,
                label=num3
            )
    else:
        invoice = Quickpay(
                receiver="410012465765599",
                quickpay_form="shop",
                targets="Sponsor",
                paymentType="SB",
                sum=2699,
                label=num3
            )
    if lingo(uid) == "RU":
        await callback.message.edit_text(
                text = hlink(
                    title="–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ üëà",
                    url=invoice.base_url
                 ),
                parse_mode=ParseMode.HTML,
                reply_markup=buy_tokens_ru()
            )
    elif lingo(uid) == "ENG":
        await callback.message.edit_text(
            text = hlink(
                title="Your payment link has been generated üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=buy_tokens_eng()
        )
    elif lingo(uid) == "ES":
        await callback.message.edit_text(
            text = hlink(
                title="Se ha generado tu enlace de pago üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=buy_tokens_es()
        )
    elif lingo(uid) == "CN":
        await callback.message.edit_text(
            text = hlink(
                title="ÊÇ®ÁöÑ‰ªòÊ¨æÈìæÊé•Â∑≤ÁîüÊàê üëà",
                url=invoice.base_url
             ),
            parse_mode=ParseMode.HTML,
            reply_markup=buy_tokens_cn()
        )
    await state.set_state(FSMForm.tokens)

#–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ (–≤ –º–µ–Ω—é –ø—Ä–µ–º–∏—É–º –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)
@router.callback_query(F.data == "back", StateFilter(FSMForm.pre_menu))
async def back(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    if lingo(uid) == "RU":
        await callback.message.edit_text(
            LEXICON_RU["premium"],
            reply_markup=ikb_premium_ru()
        )
    elif lingo(uid) == "ENG":
        await callback.message.edit_text(
            LEXICON_ENG["premium"],
            reply_markup=ikb_premium_eng()
        )
    elif lingo(uid) == "ES":
        await callback.message.edit_text(
            LEXICON_ES["premium"],
            reply_markup=ikb_premium_es()
        )
    elif lingo(uid) == "CN":
        await callback.message.edit_text(
            LEXICON_CN["premium"],
            reply_markup=ikb_premium_cn()
        )
    await state.set_state(default_state)

#–ö–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é —Å —Ç–æ–∫–µ–Ω–∞–º–∏
@router.callback_query(F.data == "back", StateFilter(FSMForm.tokens))
async def back_tokens(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    if lingo(uid) == "RU":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
            reply_markup=tokens_ikb_ru()
        )
    elif lingo(uid) == "ENG":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
            reply_markup=tokens_ikb_eng()
        )
    elif lingo(uid) == "ES":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
            reply_markup=tokens_ikb_es()
        )
    elif lingo(uid) == "CN":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
            reply_markup=tokens_ikb_cn()
        )

#–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ (–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
@router.callback_query(F.data == "back")
async def back(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    if lingo(uid) == "RU":
        await callback.message.edit_text(
            LEXICON_RU["menu"]
        )
    elif lingo(uid) == "ENG":
        await callback.message.edit_text(
            LEXICON_ENG["menu"]
        )
    elif lingo(uid) == "ES":
        await callback.message.edit_text(
            LEXICON_ES["menu"]
        )
    elif lingo(uid) == "CN":
        await callback.message.edit_text(
            LEXICON_CN["menu"]
        )
    await state.set_state(default_state)


#–ö–Ω–æ–ø–∫–∞-—Å–æ–ª–æ –Ω–∞–∑–∞–¥ (–≤ –º–µ–Ω—é –ø—Ä–µ–º–∏—É–º –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)
@router.callback_query(F.data == "back_one", StateFilter(FSMForm.pre_menu))
async def back(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    if lingo(uid) == "RU":
        await callback.message.edit_text(
            LEXICON_RU["premium"],
            reply_markup=ikb_premium_ru()
        )
    elif lingo(uid) == "ENG":
        await callback.message.edit_text(
            LEXICON_ENG["premium"],
            reply_markup=ikb_premium_eng()
        )
    elif lingo(uid) == "ES":
        await callback.message.edit_text(
            LEXICON_ES["premium"],
            reply_markup=ikb_premium_es()
        )
    elif lingo(uid) == "CN":
        await callback.message.edit_text(
            LEXICON_CN["premium"],
            reply_markup=ikb_premium_cn()
        )
    await state.set_state(default_state)

#–ö–Ω–æ–ø–∫–∞-—Å–æ–ª–æ –Ω–∞–∑–∞–¥ (–≤ –º–µ–Ω—é —Ç–æ–∫–µ–Ω–æ–≤)
@router.callback_query(F.data == "back_one", StateFilter(FSMForm.tokens))
async def back(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    if lingo(uid) == "RU":
        await callback.message.edit_text(
           "LEX['tokens']",
            reply_markup=tokens_ikb_ru()
        )
    elif lingo(uid) == "ENG":
        await callback.message.edit_text(
            "LEX['tokens']",
            reply_markup=tokens_ikb_eng()
        )
    elif lingo(uid) == "ES":
        await callback.message.edit_text(
            "LEX['tokens']",
            reply_markup=tokens_ikb_es()
        )
    elif lingo(uid) == "CN":
        await callback.message.edit_text(
            "LEX['tokens']",
            reply_markup=tokens_ikb_cn()
        )

#–ú–µ–Ω—é premium
@router.callback_query(F.data =="premium")
async def buy_premium(callback: CallbackQuery):
    uid = callback.from_user.id
    if lingo(uid) == "RU":
        await callback.message.answer(
            LEXICON_RU["premium"],
            reply_markup=ikb_premium_ru()
        )
    elif lingo(uid) == "ENG":
        await callback.message.answer(
            LEXICON_ENG["premium"],
            reply_markup=ikb_premium_eng()
        )
    elif lingo(uid) == "ES":
        await callback.message.answer(
            LEXICON_ES["premium"],
            reply_markup=ikb_premium_es()
        )
    elif lingo(uid) == "CN":
        await callback.message.answer(
            LEXICON_CN["premium"],
            reply_markup=ikb_premium_cn()
        )

#–¢–æ–∫–µ–Ω—ã –∏–∑ ikb
@router.callback_query(F.data == "tokens")
async def tokens_from_ikb(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    if lingo(uid) == "RU":
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
            reply_markup=tokens_ikb_ru()
        )
    elif lingo(uid) == "ENG":
        await callback.message.answer(
            "Select the desired number of tokens",
            reply_markup=tokens_ikb_eng()
        )
    elif lingo(uid) == "ES":
        await callback.message.answer(
            "Seleccione el n√∫mero de fichas deseado",
            reply_markup=tokens_ikb_es()
        )
    elif lingo(uid) == "CN":
        await callback.message.answer(
            "ÈÅ∏ÊìáÊâÄÈúÄÁöÑ‰ª£Âπ£Êï∏Èáè",
            reply_markup=tokens_ikb_cn()
        )
    await state.set_state(FSMForm.tokens)

@router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    if lingo(callback.from_user.id) == "RU":
        await callback.message.answer(
            "‚ùóÔ∏è–ï—Å–ª–∏ –±–æ—Ç –∑–∞–≤–∏—Å, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞‚ùóÔ∏è"
        )
    elif lingo(callback.from_user.id) == "ENG":
        await callback.message.answer(
            "‚ùóÔ∏è–ï—Å–ª–∏ bot hangs, press /start to restart –±–æ—Ç–∞‚ùóÔ∏è"
        )
    elif lingo(callback.from_user.id) == "ES":
        await callback.message.answer(
            "‚ùóÔ∏èSi el bot se cuelga, pulsa /start para reiniciarlo‚ùóÔ∏è"
        )
    elif lingo(callback.from_user.id) == "CN":
        await callback.message.answer(
            "‚ùóÔ∏èÂ¶ÇÊûúÊú∫Âô®‰∫∫ÊåÇËµ∑ÔºåÊåâ /start ÈáçÂêØÊú∫Âô®‰∫∫‚ùóÔ∏è"
        )

#–í—ã–∑–æ–≤–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç
@router.callback_query(F.data == "text_ru")
async def pag_text(callback: CallbackQuery):
    page = 1
    await callback.message.edit_text(
        f"üîπ–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å!\n\n‚úÖ–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–º–∏ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤—ã –Ω–µ –≤—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–≤—É—é!\n\nüëæ–ù–µ–π—Ä–æ—Å–µ—Ç—å: {title(page)}\n\nüíé–†–∞—Å—Ö–æ–¥: {stat(page)}",
        reply_markup=get_paginated_kb_ru()
    )

@router.callback_query(F.data == "text_eng")
async def pag_text(callback: CallbackQuery):
    page = 1
    await callback.message.edit_text(
        f"üîπChoose a AI!\n\n‚úÖThe model you have selected will be used until you choose a new one!\n\nüëæAI: {title(page)}\n\nüíéFlow rate: {stat_eng(page)}",
        reply_markup=get_paginated_kb_eng()
    )

@router.callback_query(F.data == "text_es")
async def pag_text(callback: CallbackQuery):
    page = 1
    await callback.message.edit_text(
        f"üîπ¬°Elige IA!\n\n‚úÖEl modelo elegido se utilizar√° hasta que elija uno nuevo\n\nüëæAI: {title(page)}\n\nüíéGastos: {stat_es(page)}",
        reply_markup=get_paginated_kb_es()
    )

@router.callback_query(F.data == "text_cn")
async def pag_text(callback: CallbackQuery, state: FSMContext):
    page = 1
    await callback.message.edit_text(
        f"üîπÈÄâÊã©‰∫∫Â∑•Êô∫ËÉΩ!\n\n‚úÖÊÇ®ÈÄâÊã©ÁöÑÊ®°ÂûãÂ∞Ü‰∏ÄÁõ¥‰ΩøÁî®ÔºåÁõ¥Âà∞ÊÇ®ÈÄâÊã©Êñ∞ÁöÑÊ®°Âûã!\n\nüî•Êñ∞Á•ûÁªèÁΩëÁªú: {title(page)}\n\nüíéÊµÅÈáè: {stat_cn(page)}",
        reply_markup=get_paginated_kb_cn()
    )

@router.callback_query(F.data == "photo_ru")
async def pag_text(callback: CallbackQuery):
    uid = callback.from_user.id
    ai = "DALL-E 3"
    await callback.message.answer(
        f"üîπ–î–ª—è –≥–µ–Ω–∏—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DALL-E 3\n\n‚úÖ–ß—Ç–æ –±—ã —Å–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç! \n\n‚ú®–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É\n'üîÅ–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é' –∏ –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –∑–∞–ø—Ä–æ—Å!\n\nüëæ–ù–µ–π—Ä–æ—Å–µ—Ç—å: DALL-E 3\n\nüíé–†–∞—Å—Ö–æ–¥: 1000 —Ç–æ–∫–µ–Ω–æ–≤",
        update_ai(uid, ai)
    )

@router.callback_query(F.data == "photo_eng")
async def pag_text(callback: CallbackQuery):
    uid = callback.from_user.id
    ai = "DALL-E 3"
    await callback.message.answer(
        f"üîπThe DALL-E 3 is used for photo generation!\n\n‚úÖTo generate a photo, just enter the text!\n\n‚ú®To re-generate, simply click\n'üîÅRe-generate' and enter your desired request!\n\nüëæAI: DALL-E 3 3\n\nüíéFlow rate: 1000 tokens",
        update_ai(uid, ai)
    )

@router.callback_query(F.data == "photo_es")
async def pag_text(callback: CallbackQuery):
    uid = callback.from_user.id
    ai = "DALL-E 3"
    await callback.message.answer(
        f"üîπ El DALL-E 3 se utiliza para la generaci√≥n de fotos\n\n‚úÖ¬°Para generar una foto, basta con introducir el texto!\n\n‚ú®Para volver a generar, simplemente haz clic en\n'üîÅRe-generar' e introduce la solicitud que desee\n\nüëæAI: DALL-E 3 3\n\nüíéGastos: 1000 tokens",
        update_ai(uid, ai)
    )

@router.callback_query(F.data == "photo_cn")
async def pag_text(callback: CallbackQuery):
    uid = callback.from_user.id
    ai = "DALL-E 3"
    await callback.message.answer(
        f"üîπ„ÄäDALL-E 3„ÄãÁî®‰∫éÁîüÊàêÁÖßÁâá\n\n‚úÖË¶ÅÁîüÊàêÁÖßÁâáÔºåÂè™ÈúÄËæìÂÖ•ÊñáÂ≠ó!\n\n‚ú®Ë¶ÅÈáçÊñ∞ÁîüÊàêÔºåÂè™ÈúÄÂçïÂáª‚ÄúüîÅÈáçÊñ∞ÁîüÊàê ‚ÄùÂπ∂ËæìÂÖ•ÊâÄÈúÄÁöÑËØ∑Ê±Ç!\n\nüëæÁ•ûÁªèÁΩëÁªúÔºöDALL-E 3 3\n\nüíéË¥πÁî®Ôºö1000 ‰ª£Â∏Å",
        update_ai(uid, ai)
    )


#–í—ã–±–æ—Ä –Ω–µ–π—Ä–æ–Ω–æ–∫
@router.callback_query(Pagination_ru.filter())
async def neuro_ru(callback: CallbackQuery, callback_data: Pagination_ru):
    uid = callback.from_user.id
    page = callback_data.page
    neuro = title(page)
    update_ai(uid, neuro)
    await callback.message.edit_text(
            f"üîπ–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å!\n\n‚úÖ–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–º–∏ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤—ã –Ω–µ –≤—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–≤—É—é!\n\nüëæ–ù–µ–π—Ä–æ—Å–µ—Ç—å: {title(page)}\n\nüíé–†–∞—Å—Ö–æ–¥: {stat(page)}",
            reply_markup=get_paginated_kb_ru(page=page) 
        )

@router.callback_query(Pagination_eng.filter())
async def neuro_eng(callback: CallbackQuery, callback_data: Pagination_eng):
    uid = callback.from_user.id
    page = callback_data.page
    neuro = title(page)
    update_ai(uid, neuro)
    await callback.message.edit_text(
            f"üîπChoose a AI!\n\n‚úÖThe model you have selected will be used until you choose a new one!\n\nüëæModel of AI: {title(page)}\n\nüíéFlow rate: {stat_eng(page)}",
            reply_markup=get_paginated_kb_eng(page=page) 
        )

@router.callback_query(Pagination_es.filter())
async def neuro_es(callback: CallbackQuery, callback_data: Pagination_es):
    uid = callback.from_user.id
    page = callback_data.page
    neuro = title(page)
    update_ai(uid, neuro)
    await callback.message.edit_text(
            f"üîπ¬°Elige IA!\n\n‚úÖEl modelo elegido se utilizar√° hasta que elija uno nuevo\n\nüëæAI: {title(page)}\n\nüíéGastos: {stat_es(page)}",
            reply_markup=get_paginated_kb_es(page=page) 
        )

@router.callback_query(Pagination_cn.filter())
async def neuro_cn(callback: CallbackQuery, callback_data: Pagination_cn):
    uid = callback.from_user.id
    page = callback_data.page
    neuro = title(page)
    update_ai(uid, neuro)
    await callback.message.edit_text(
            f"üîπÈÄâÊã©‰∫∫Â∑•Êô∫ËÉΩ!\n\n‚úÖÊÇ®ÈÄâÊã©ÁöÑÊ®°ÂûãÂ∞Ü‰∏ÄÁõ¥‰ΩøÁî®ÔºåÁõ¥Âà∞ÊÇ®ÈÄâÊã©Êñ∞ÁöÑÊ®°Âûã!\n\nüëæÁ•ûÁªèÁΩëÁªú: {title(page)}\n\nüíéÊµÅÈáè: {stat_cn(page)}",
            reply_markup=get_paginated_kb_cn(page=page) 
        )
    
@router.callback_query(F.data == "1")
async def service_1(callback: CallbackQuery):
    uid = callback.from_user.id
    num = "1"
    if check_user_prem(uid) == True:
        set_mode(uid, num)
        if lingo(uid) == "RU":
            await callback.message.edit_text(
            "‚úÖ–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Ä–µ–∂–∏–º –±–µ–∑ –∑–∞–¥–∞—á"
                )
        elif lingo(uid) == "ENG":
            await callback.message.edit_text(
                "‚úÖYou have enabled the no-task mode"
            )
        elif lingo(uid) == "ES":
            await callback.message.edit_text(
                "‚úÖHas cambiado al modo sin tareas"
            )
        elif lingo(uid) == "CN":
            await callback.message.edit_text(
                "‚úÖÊÇ®Â∑≤ÂàáÊç¢Âà∞Êó†‰ªªÂä°Ê®°Âºè"
            )

    else:
        if lingo(uid) == "RU":
            await callback.message.edit_text(
                "üíé–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º!",
                reply_markup=ikb_premium_ru()
            )
        elif lingo(uid) == "ENG":
            await callback.message.edit_text(
                "üíéTo use these features, purchase premium!",
                reply_markup=ikb_premium_eng()
            )
        elif lingo(uid) == "ES":
            await callback.message.edit_text(
                "üíéPara utilizar estas funciones, ¬°compra Premium!",
                reply_markup=ikb_premium_es()
            )
        elif lingo(uid) == "CN":
            await callback.message.edit_text(
                "üíéË¶Å‰ΩøÁî®Ëøô‰∫õÂäüËÉΩÔºåËØ∑Ë¥≠‰π∞È´òÁ∫ßÁâà!",
                reply_markup=ikb_premium_cn()
            )

@router.callback_query(F.data == "2")
async def service_1(callback: CallbackQuery):
    uid = callback.from_user.id
    num = "2"
    if check_user_prem(uid) == True:
        set_mode(uid, num)
        if lingo(uid) == "RU":
            await callback.message.answer(
            "‚úÖ–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç–µ–º—É –¥–ª—è —ç—Å—Å–µ"
                )
        elif lingo(uid) == "ENG":
            await callback.message.answer(
                "‚úÖWrite your essay topic",
            )
        elif lingo(uid) == "ES":
            await callback.message.answer(
                "‚úÖEscriba el tema de su ensayo",
            )
        elif lingo(uid) == "CN":
            await callback.message.answer(
                "‚úÖÊí∞ÂÜôËÆ∫ÊñáÈ¢òÁõÆ",
            )

    else:
        if lingo(uid) == "RU":
            await callback.message.answer(
                "üíé–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º!",
                reply_markup=ikb_premium_ru()
            )
        elif lingo(uid) == "ENG":
            await callback.message.answer(
                "üíéTo use these features, purchase premium!",
                reply_markup=ikb_premium_eng()
            )
        elif lingo(uid) == "ES":
            await callback.message.answer(
                "üíéPara utilizar estas funciones, ¬°compra Premium!",
                reply_markup=ikb_premium_es()
            )
        elif lingo(uid) == "CN":
            await callback.message.answer(
                "üíéË¶Å‰ΩøÁî®Ëøô‰∫õÂäüËÉΩÔºåËØ∑Ë¥≠‰π∞È´òÁ∫ßÁâà!",
                reply_markup=ikb_premium_cn()
            )

@router.callback_query(F.data == "3")
async def service_1(callback: CallbackQuery):
    uid = callback.from_user.id
    num = "3"
    if check_user_prem(uid) == True:
        if lingo(uid) == "RU":
            set_mode(uid, num)
            await callback.message.answer(
            "‚úÖ–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–π –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã"
                )
        elif lingo(uid) == "ENG":
            await callback.message.answer(
                "‚úÖWrite the topic of your term paper",
            )
        elif lingo(uid) == "ES":
            await callback.message.answer(
                "‚úÖEscribe el tema de tu trabajo trimestral",
            )
        elif lingo(uid) == "CN":
            callback.message.answer(
                "‚úÖÂÜôÂá∫Â≠¶ÊúüËÆ∫ÊñáÁöÑÈ¢òÁõÆ",
            )

    else:
        if lingo(uid) == "RU":
            await callback.message.answer(
                "üíé–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º!",
                reply_markup=ikb_premium_ru()
            )
        elif lingo(uid) == "ENG":
            await callback.message.answer(
                "üíéTo use these features, purchase premium!",
                reply_markup=ikb_premium_eng()
            )
        elif lingo(uid) == "ES":
            await callback.message.answer(
                "üíéPara utilizar estas funciones, ¬°compra Premium!",
                reply_markup=ikb_premium_es()
            )
        elif lingo(uid) == "CN":
            await callback.message.answer(
                "üíéË¶Å‰ΩøÁî®Ëøô‰∫õÂäüËÉΩÔºåËØ∑Ë¥≠‰π∞È´òÁ∫ßÁâà!",
                reply_markup=ikb_premium_cn()
            )

@router.callback_query(F.data == "4")
async def service_1(callback: CallbackQuery):
    uid = callback.from_user.id
    num = "4"
    if check_user_prem(uid) == True:
        set_mode(uid, num)
        if lingo(uid) == "RU":
            await callback.message.answer(
            "‚úÖ–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≤–∞—à–µ–π Seo —Å—Ç–∞—Ç—å–∏"
                )
        elif lingo(uid) == "ENG":
            await callback.message.answer(
                "‚úÖEscribe un tema para tu art√≠culo seo",
            )
        elif lingo(uid) == "ES":
            await callback.message.answer(
                "‚úÖEscriba el tema de su ensayo",
            )
        elif lingo(uid) == "CN":
            await callback.message.answer(
                "‚úÖ‰∏∫‰Ω†ÁöÑÊêúÁ¥¢ÂºïÊìé‰ºòÂåñÊñáÁ´†ÂÜô‰∏Ä‰∏™‰∏ªÈ¢ò",
            )

    else:
        if lingo(uid) == "RU":
            await callback.message.answer(
                "üíé–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º!",
                reply_markup=ikb_premium_ru()
            )
        elif lingo(uid) == "ENG":
            await callback.message.answer(
                "üíéTo use these features, purchase premium!",
                reply_markup=ikb_premium_eng()
            )
        elif lingo(uid) == "ES":
            await callback.message.answer(
                "üíéPara utilizar estas funciones, ¬°compra Premium!",
                reply_markup=ikb_premium_es()
            )
        elif lingo(uid) == "CN":
            await callback.message.answer(
                "üíéË¶Å‰ΩøÁî®Ëøô‰∫õÂäüËÉΩÔºåËØ∑Ë¥≠‰π∞È´òÁ∫ßÁâà!",
                reply_markup=ikb_premium_cn()
            )